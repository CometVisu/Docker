#!/bin/sh
set -e

echo "#!/bin/sh" >  /usr/local/bin/healthcheck
chmod a+x /usr/local/bin/healthcheck

if [ x"${STOP_ON_BAD_HEALTH}" = x"true" ]
    then echo "badhealth='apachectl stop'" >> /usr/local/bin/healthcheck
    else echo "badhealth='true'" >> /usr/local/bin/healthcheck
fi

if [ x"${ADDITIONAL_HEALTHCHECK}" != x"" ]
    echo "${ADDITIONAL_HEALTHCHECK}" >> /usr/local/bin/healthcheck
fi

if [ x"${BACKEND_NAME}" = x"default" ] || [ x"${BACKEND_NAME}" = x"" ]; then
    BACKEND_NAME="knxd"
fi

case "${BACKEND_NAME}" in
    *knxd*)
        if [ x"${KNX_INTERFACE}" != x"" ]; then
            echo "starting knxd"
            knxd -i $KNX_INTERFACE -e $KNX_PA $KNXD_PARAMETERS
            sleep 0.2
            chmod a+w /tmp/eib
            echo "if ! pidof knxd >/dev/null; then echo 'Error: knxd not running'; \$badhealth > /dev/null 2>&1; exit 1; fi" >> /usr/local/bin/healthcheck
            echo "if [ ! -e /tmp/eib ]; then echo 'Error: knxd socket does not exist'; \$badhealth > /dev/null 2>&1; exit 1; fi" >> /usr/local/bin/healthcheck
            echo "if [ ! -S /tmp/eib ]; then echo 'Error: /tmp/eib is not a socket'; \$badhealth > /dev/null 2>&1; exit 1; fi" >> /usr/local/bin/healthcheck
            echo "if [ \`ls -l /tmp/eib | cut -c 2-10\` != \"rwxrwxrwx\" ]; then echo 'Error: /tmp/eib permissions are wrong:'; ls -l /tmp/eib; \$badhealth > /dev/null 2>&1; exit 1; fi" >> /usr/local/bin/healthcheck
        else
            echo "ERROR: knxd backend selected, but KNX_INTERFACE is not set!"
        fi
        ;;
esac

CGI_URL_PATH=${CGI_URL_PATH:-/cgi-bin/}

BACKEND_KNXD=${BACKEND_KNXD:-${CGI_URL_PATH}l}
BACKEND_OPENHAB=${BACKEND_OPENHAB:-$CGI_URL_PATH}
BASE_URL=${BACKEND_KNXD%?}

echo "Server side configuration parameters:"
echo "BACKEND_NAME: '${BACKEND_NAME}'"
echo "BACKEND_KNXD: '${BACKEND_KNXD}'"
echo "BACKEND_MQTT: '${BACKEND_MQTT}'"
echo "BACKEND_OPENHAB: '${BACKEND_OPENHAB}'"
echo "CGI_URL_PATH: '${CGI_URL_PATH}' (deprecated)"
echo "knxd baseURL: '${BASE_URL}'"

# Tell the CometVisu to path to the login
echo ''                                                             >> $APACHE_CONFDIR/conf-available/cv-docker-php.conf
echo '<FilesMatch "visu_config.*xml$">'                             >> $APACHE_CONFDIR/conf-available/cv-docker-php.conf
if [ x"${BACKEND_NAME}" != x"" ]; then
    echo "    Header set X-CometVisu-Backend-Name ${BACKEND_NAME}"            >> $APACHE_CONFDIR/conf-available/cv-docker-php.conf
fi
if [ x"${BACKEND_KNXD}" != x"" ]; then
    echo "    Header set X-CometVisu-Backend-KNXD-Url ${BACKEND_KNXD}"        >> $APACHE_CONFDIR/conf-available/cv-docker-php.conf
fi
if [ x"${BACKEND_MQTT}" != x"" ]; then
    echo "    Header set X-CometVisu-Backend-MQTT-Url ${BACKEND_MQTT}"        >> $APACHE_CONFDIR/conf-available/cv-docker-php.conf
fi
if [ x"${BACKEND_OPENHAB}" != x"" ]; then
    echo "    Header set X-CometVisu-Backend-OpenHAB-Url ${BACKEND_OPENHAB}"  >> $APACHE_CONFDIR/conf-available/cv-docker-php.conf
fi
echo '</FilesMatch>'                                                >> $APACHE_CONFDIR/conf-available/cv-docker-php.conf

# Pass CometVisu the resource path during the login
sed -i 's@\\\"s\\\":\\\"SESSION\\\".*}\"@\\\"s\\\":\\\"SESSION\\\", \\\"c\\\": {\\\"baseURL\\\": \\\"'"$CGI_URL_PATH"'\\\"} }"@' /usr/lib/cgi-bin/l

if [ x"${BACKEND_PROXY_SOURCE}" != x"" ] && [ x"${BACKEND_PROXY_TARGET}" != x"" ]; then
    echo "proxying ${BACKEND_PROXY_SOURCE} -> ${BACKEND_PROXY_TARGET}"
    # exclude manager backend from proxying
    echo "ProxyPass" /rest/manager !                                        >  $APACHE_CONFDIR/conf-available/cv-proxy.conf
    echo "ProxyPass ${BACKEND_PROXY_SOURCE} ${BACKEND_PROXY_TARGET}"        >>  $APACHE_CONFDIR/conf-available/cv-proxy.conf
    echo "ProxyPassReverse ${BACKEND_PROXY_TARGET} ${BACKEND_PROXY_SOURCE}" >> $APACHE_CONFDIR/conf-available/cv-proxy.conf

    a2enmod proxy_http > /dev/null
    a2enconf cv-proxy.conf > /dev/null
fi

rm /var/log/apache2/access.log
if [ x"${ACCESS_LOG}" = x"true" ]
    then ln -s /dev/stdout /var/log/apache2/access.log
    else ln -s /dev/null /var/log/apache2/access.log
fi

echo "if ! curl -f -s http://localhost/ >/dev/null; then echo 'Error: apache not responding'; \$badhealth > /dev/null 2>&1; exit 1; fi" >> /usr/local/bin/healthcheck

# first arg is `-f` or `--some-option`
if [ x"${1#-}" != x"$1" ]; then
    set -- apache2-foreground "$@"
fi

echo "running '$@'..."
exec "$@"